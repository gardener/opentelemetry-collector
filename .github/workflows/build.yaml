name: Build

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        default: snapshot
        description: |
          the mode to use. either `snapshot` or `release`. Will affect effective version, as well
          as target-oci-registry.

jobs:
  prepare:
    uses: gardener/cc-utils/.github/workflows/prepare.yaml@master
    with:
      mode: ${{ inputs.mode }}
      version-commit-callback-action-path: .github/actions/prepare-release
    permissions:
      contents: read

  get-version-info:
    runs-on: ubuntu-latest
    outputs:
      effective-version: ${{ steps.get-version-info.outputs.effective-version }}
      revision: ${{ steps.get-version-info.outputs.revision }}
      build-date: ${{ steps.get-version-info.outputs.build-date }}
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - uses: gardener/cc-utils/.github/actions/trusted-checkout@master
      - id: get-version-info
        run: |
          effective_version=$( make print-effective-version )
          revision=$( make print-revision )
          build_date=$( date -u +'%Y-%m-%dT%H:%M:%SZ' )
          echo "effective-version=${effective_version}" >> "${GITHUB_OUTPUT}"
          echo "revision=${revision}" >> "${GITHUB_OUTPUT}"
          echo "build-date=${build_date}" >> "${GITHUB_OUTPUT}"

  oci-images:
    name: Build OCI-Images
    needs:
      - prepare
      - get-version-info
    permissions:
      contents: read
      packages: write
      id-token: write
    secrets: inherit
    uses: gardener/cc-utils/.github/workflows/oci-ocm.yaml@master
    strategy:
      matrix:
        args:
          - name: opentelemetry-collector
            target: collector
            oci-repository: gardener/observability/opentelemetry-collector
    with:
      name: ${{ matrix.args.name }}
      version: ${{ needs.prepare.outputs.version }}
      target: ${{ matrix.args.target }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: ${{ matrix.args.oci-repository }}
      oci-platforms: linux/amd64,linux/arm64
      ocm-labels: ${{ toJSON(matrix.args.ocm-labels) }}
      build-args: |
        BUILD_DATE=${{needs.get-version-info.outputs.build-date}}
        EFFECTIVE_VERSION=${{needs.get-version-info.outputs.effective-version}}
        REVISION=${{needs.get-version-info.outputs.revision}}

  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - uses: gardener/cc-utils/.github/actions/trusted-checkout@master
      - name: run-verify
        run: |
          set -eu
          make verify-extended go-sec-report-build
          # verify calls `make sast-report`, which generates `gosec-report.sarif`
          # make sure to add any additional gosec reports to the archive when introducing new components (exporters, receivers, etc.)
          mkdir /tmp/blobs.d
          tar czf /tmp/blobs.d/gosec-report.tar.gz _build/gosec-report.sarif
      - name: add-sast-report-to-component-descriptor
        uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
        with:
          blobs-directory: /tmp/blobs.d
          ocm-resources: |
            name: gosec-report
            relation: local
            access:
              type: localBlob
              localReference: gosec-report.tar.gz
            labels:
              - name: gardener.cloud/purposes
                value:
                  - lint
                  - sast
                  - gosec
              - name: gardener.cloud/comment
                value: |
                  we use gosec (linter) for SAST scans
                  see: https://github.com/securego/gosec

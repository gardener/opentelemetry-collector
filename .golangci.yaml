---
version: "2"

# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 20m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

linters:
  enable:
    - copyloopvar
    - decorder
    - depguard
    - errcheck
    - errorlint
    - exhaustive
    - gocritic
    - gosec
    - govet
    - misspell
    - predeclared
    - reassign
    - revive
    - staticcheck
    - testifylint
    - thelper
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - wastedassign
    - whitespace

  settings:
    # See the dedicated "linters.settings" documentation section.
    revive:
      # minimal confidence for issues, default is 0.8
      confidence: 0.8
      rules:
        # Blank import should be only in a main or test package, or have a comment justifying it.
        - name: blank-imports
        # context.Context() should be the first parameter of a function when provided as argument.
        - name: context-as-argument
        # Basic types should not be used as a key in `context.WithValue`
        - name: context-keys-type
        # Importing with `.` makes the programs much harder to understand
        - name: dot-imports
        # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
        - name: empty-block
        # for better readability, variables of type `error` must be named with the prefix `err`.
        - name: error-naming
        # for better readability, the errors should be last in the list of returned values by a function.
        - name: error-return
        # for better readability, error messages should not be capitalized or end with punctuation or a newline.
        - name: error-strings
        # report when replacing `errors.New(fmt.Sprintf())` with `fmt.Errorf()` is possible
        - name: errorf
        # incrementing an integer variable by 1 is recommended to be done using the `++` operator
        - name: increment-decrement
        # highlights redundant else-blocks that can be eliminated from the code
        - name: indent-error-flow
        # This rule suggests a shorter way of writing ranges that do not use the second value.
        - name: range
        # receiver names in a method should reflect the struct name (p for Person, for example)
        - name: receiver-naming
        # redefining built in names (true, false, append, make) can lead to bugs very difficult to detect.
        - name: redefines-builtin-id
        # redundant else-blocks that can be eliminated from the code.
        - name: superfluous-else
        # prevent confusing name for variables when using `time` package
        - name: time-naming
        # warns when an exported function or method returns a value of an un-exported type.
        - name: unexported-return
        # spots and proposes to remove unreachable code. also helps to spot errors
        - name: unreachable-code
        # Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.
        - name: unused-parameter
        # Since Go 1.18, interface{} has an alias: any. This rule proposes to replace instances of interface{} with any.
        - name: use-any
        # report when a variable declaration can be simplified
        - name: var-declaration
        # warns when initialism, variable or package naming conventions are not followed.
        - name: var-naming

    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Default is to use a neutral variety of English.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      locale: US
      ignore-rules:
        - cancelled
        - metre
        - meter
        - metres
        - kilometre
        - kilometres

    depguard:
      rules:
        denied-deps:
          deny:
            - pkg: go.uber.org/atomic
              desc: "Use 'sync/atomic' instead of go.uber.org/atomic"
            - pkg: github.com/pkg/errors
              desc: "Use 'errors' or 'fmt' instead of github.com/pkg/errors"
            - pkg: github.com/hashicorp/go-multierror
              desc: "Use go.uber.org/multierr instead of github.com/hashicorp/go-multierror"
            # Add a different guard rule so that we can ignore tests.
          ignore-in-test:
            deny:
              - pkg: go.opentelemetry.io/proto
                desc: "Use go.opentelemetry.io/collector/pdata instead"
                # Allow in tests for testing pdata or other receivers/exporters that expect OTLP.
            files:
              - "!**/*_test.go"

    exhaustive:
      explicit-exhaustive-switch: true
      ignore-enum-members: "pmetric.MetricTypeEmpty"

    predeclared:
      ignore:
        - copy

    testifylint:
      disable:
        - float-compare
        - require-error
        - suite-subtest-run
        - encoded-compare # has false positives that cannot be fixed with testifylint-fix
      enable-all: true

    thelper:
      test:
        begin: false
      benchmark:
        begin: false
      tb:
        begin: false
      fuzz:
        begin: false

  # Defines a set of rules to ignore issues.
  # It does not skip the analysis, and so does not ignore "typecheck" errors.
  exclusions:
    generated: lax
    # Log a warning if an exclusion rule is unused.
    # Default: false
    warn-unused: true
    # Predefined exclusion rules.
    # Default: []
    presets:
      - comments
      - std-error-handling
      - common-false-positives
      - legacy
    # Excluding configuration per-path, per-linter, per-text and per-source.
    rules:
      # Exclude some `staticcheck` messages.
      - linters:
          - gosec
        text: "G404:"
      - linters:
          - gosec
        text: "G402:"
      - linters:
          - gosec
        text: "G115:"

    # Which file paths to exclude: they will be analyzed, but issues from them won't be reported.
    # "/" will be replaced by the current OS file path separator to properly work on Windows.
    # Default: []
    paths:
      - third_party
      - local
      - internal/tools
      - _build

# Formatter settings
formatters:
  enable:
    - gci
    - gofmt
    - gofumpt
    - goimports
  settings:
    gci:
      sections:
        - standard
        - default
        - prefix(github.com/gardener/opentelemetry-collector)

# Output configuration options
output:
  formats:
    text:
      # print lines of code with issue, default is true
      print-issued-lines: true
      # print linter name in the end of issue text, default is true
      print-linter-name: true
      colors: true
